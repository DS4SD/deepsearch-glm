on:
  workflow_call:

env:
  CMAKE_BUILD_TYPE: Release

jobs:
  build_wheels:
    name: Build wheel for py${{ matrix.python-version }} ${{ matrix.os.platform_id }} ${{ matrix.os.macos_version }}
    runs-on: ${{ matrix.os.name }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      # list of github vm: https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

        os:
          - name: "ubuntu-latest"
            platform: "linux"
            platform_id: "manylinux_x86_64"

          - name: "macos-13"
            platform: "macos"
            macos_version: "13"
            platform_id: "macosx_x86_64"

          - name: "macos-13"
            platform: "macos"
            macos_version: "13"
            platform_id: "macosx_arm64"

          - name: "macos-14"
            platform: "macos"
            macos_version: "14"
            platform_id: "macosx_x86_64"

          - name: "macos-14"
            platform: "macos"
            macos_version: "14"
            platform_id: "macosx_arm64"

          - name: "windows-latest"
            platform: "windows"
            platform_id: "win_amd64"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        id: py
        with:
          python-version: ${{ matrix.python-version }}
          update-environment: false
  
      - name: Install Poetry
        run: |
          which python
          python --version
          which python3
          python3 --version
          echo "pythonpath: ${{ steps.py.outputs.python-path }}"
          ${{ steps.py.outputs.python-path }} --version
          pipx install poetry==1.8.3
          poetry env use ${{ steps.py.outputs.python-path }}

      - name: Set up custom PATH and set py version to cpXYZ [windows]
        if: ${{matrix.os.platform_id == 'win_amd64'}}
        shell: pwsh
        run: |
          echo "C:\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Users\runneradmin\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\nasm" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $version = "${{ matrix.python-version }}"
          $cp_version = "cp$($version -replace '\.', '')"
          Add-Content -Path $env:GITHUB_ENV -Value "python_cp_version=$cp_version"

      - name: Convert python version to cpXYZ
        if: ${{matrix.os.platform_id != 'win_amd64'}}
        run: |
          version=${{ matrix.python-version }}
          cp_version="cp${version//.}"
          echo "python_cp_version=$cp_version" >> $GITHUB_ENV

      - name: Setup pypi for poetry [for releases only]
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          poetry config keyring.enabled false
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          
      - name: Build wheels [macos-x86_64]
        if: ${{matrix.os.platform_id == 'macosx_x86_64'}}
        env:
          CIBW_BUILD: ${{ env.python_cp_version }}-${{ matrix.os.platform_id }}
          CIBW_ARCHS: x86_64
          CIBW_ARCHS_MACOS: x86_64
          CIBW_PLATFORM: macos
          CIBW_SKIP: "pp* *-musllinux_* *_i686* *_s390* *arm64* *pypy*"
          CIBW_PROJECT_REQUIRES_PYTHON: "~=${{ matrix.python-version }}.0"
          CIBW_BUILD_VERBOSITY: 3
          CMAKE_OSX_ARCHITECTURES: x86_64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""  # do not run delocate-wheel before the re-tag
          CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=${{ matrix.os.macos_version }}.0"
          ARCHFLAGS: -arch x86_64
          BUILD_THREADS: "4"
          PYTORCH_MPS_HIGH_WATERMARK_RATIO: "0.0"
        run: |
          PY_CACHE_TAG=$(poetry run python -c 'import sys;print(sys.implementation.cache_tag)')
          echo "Building wheel ${CIBW_BUILD} ${{ env.CIBW_BUILD }}"
          echo "Building cp: ${{ env.python_cp_version }}"
          echo "Building cache_tag: ${PY_CACHE_TAG}"
          echo "Building platform_id: ${{ matrix.os.platform_id }}"
          poetry run python --version
          poetry run python --version | grep ${{ matrix.python-version }} 
          poetry install --no-root --only=build
          cat ./pyproject.toml
          poetry run python -m cibuildwheel --output-dir wheelhouse
          echo "step 1"
          ls -l wheelhouse
          poetry run wheel tags --platform-tag macosx_${{ matrix.os.macos_version }}_0_x86_64 ./wheelhouse/*.whl
          rm -f ./wheelhouse/*arm64.whl
          echo "step 2"
          ls -l wheelhouse
          poetry run delocate-wheel --require-archs x86_64 -v ./wheelhouse/*.whl
          echo "step 3"
          ls -l wheelhouse
          for file in ./wheelhouse/*.whl; do
            echo "Inspecting $file"
            poetry run python -m zipfile --list "$file"
            echo "Checking if .so is contained in the wheel"
            poetry run python -m zipfile --list "$file" | grep \\.so
            echo "Checking if the correct python version is contained in the wheel"
            poetry run python -m zipfile --list "$file" | grep ${PY_CACHE_TAG}
          done
          mkdir -p ./dist
          cp wheelhouse/*.whl ./dist/

      # there is an error with the tagging of wheels for macosx-arm64
      # see note: https://cibuildwheel.readthedocs.io/en/stable/faq/
      # see here: https://gist.github.com/anderssonjohan/49f07e33fc5cb2420515a8ac76dc0c95#file-build-pendulum-wheels-yml-L39-L53
      - name: Build wheels [macos-arm64]
        if: ${{matrix.os.platform_id == 'macosx_arm64'}}
        env:
          CIBW_BUILD: ${{ env.python_cp_version }}-${{ matrix.os.platform_id }}
          CIBW_ARCHS: arm64
          CIBW_ARCHS_MACOS: arm64
          CIBW_PLATFORM: macos
          CIBW_SKIP: "pp* *-musllinux_* *_i686* *x86_64* *_s390* *pypy*"
          CIBW_PROJECT_REQUIRES_PYTHON: "~=${{ matrix.python-version }}.0"
          CIBW_BUILD_VERBOSITY: 3
          CMAKE_OSX_ARCHITECTURES: arm64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""  # do not run delocate-wheel before the re-tag
          CIBW_ENVIRONMENT: "MACOSX_DEPLOYMENT_TARGET=${{ matrix.os.macos_version }}.0"
          ARCHFLAGS: -arch arm64
          BUILD_THREADS: "4"
          PYTORCH_MPS_HIGH_WATERMARK_RATIO: "0.0"
          CUDA_VISIBLE_DEVICES: "cpu"
        run: |
          PY_CACHE_TAG=$(poetry run python -c 'import sys;print(sys.implementation.cache_tag)')
          echo "Building wheel ${CIBW_BUILD} ${{ env.CIBW_BUILD }}"
          echo "Building cp: ${{ env.python_cp_version }}"
          echo "Building cache_tag: ${PY_CACHE_TAG}"
          echo "Building platform_id: ${{ matrix.os.platform_id }}"
          poetry run python --version
          poetry run python --version | grep ${{ matrix.python-version }} 
          poetry install --no-root --only=build
          cat ./pyproject.toml
          poetry run python -m cibuildwheel --output-dir wheelhouse
          echo "step 1"
          ls -l wheelhouse
          poetry run wheel tags --platform-tag macosx_${{ matrix.os.macos_version }}_0_arm64 ./wheelhouse/*.whl
          rm -f ./wheelhouse/*x86_64.whl
          echo "step 2"
          ls -l wheelhouse
          poetry run delocate-wheel --require-archs arm64 -v ./wheelhouse/*.whl
          echo "step 3"
          ls -l wheelhouse
          for file in ./wheelhouse/*.whl; do
            echo "Inspecting $file"
            poetry run python -m zipfile --list "$file"
            echo "Checking if .so is contained in the wheel"
            poetry run python -m zipfile --list "$file" | grep \\.so
            echo "Checking if the correct python version is contained in the wheel"
            poetry run python -m zipfile --list "$file" | grep ${PY_CACHE_TAG}
          done
          mkdir -p ./dist
          cp wheelhouse/*.whl ./dist/

      - name: Set up QEMU [linux]
        if: matrix.os.name == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
        with:
            platforms: all

      - name: Build sdist
        # build only on Linux to avoid too many duplicates of the sdist
        if: matrix.os.name == 'ubuntu-latest' 
        run: |
          echo "Building wheel ${CIBW_BUILD}"
          poetry build -f sdist

      - name: Build wheels [linux]
        if: matrix.os.name == 'ubuntu-latest'
        env:
          ## CIBW_BUILD: ${{ env.python_cp_version }}-${{ matrix.os.platform_id }}
          CIBW_ARCHS: auto x86_64 aarch64
          CIBW_PLATFORM: linux
          CIBW_SKIP: "pp* *musllinux_* *_i686* *_s390* *pypy*"
          CIBW_PROJECT_REQUIRES_PYTHON: "~=${{ matrix.python-version }}.0"
          CIBW_BUILD_VERBOSITY: 3
          BUILD_THREADS: "8"
        run: |
          PY_CACHE_TAG=$(poetry run python -c 'import sys;print(sys.implementation.cache_tag)')
          echo "Building cp: ${{ env.python_cp_version }}"
          echo "Building cache_tag: ${PY_CACHE_TAG}"
          echo "Building platform_id: ${{ matrix.os.platform_id }}"
          poetry run python --version
          poetry run python --version | grep ${{ matrix.python-version }} 
          poetry install --no-root --only=build
          cat ./pyproject.toml
          poetry run python -m cibuildwheel --output-dir ./wheelhouse
          ls -l ./wheelhouse
          for file in ./wheelhouse/*.whl; do
            echo "Inspecting $file"
            poetry run python -m zipfile --list "$file"
            echo "Checking if .so is contained in the wheel"
            poetry run python -m zipfile --list "$file" | grep \\.so
            echo "Checking if the correct python version is contained in the wheel"
            poetry run python -m zipfile --list "$file" | grep ${PY_CACHE_TAG}
          done
          mkdir -p ./dist
          cp wheelhouse/*.whl ./dist/

      - name: Test install wheel [macos-arm64]
        if: matrix.os.platform_id == 'macosx_arm64' && matrix.os.name == 'macos-14'
        shell: bash
        run: |
          wheel_file=$(ls dist/*.whl | head -n 1)
          poetry run pip install "$wheel_file"

      - name: Set up MSYS2 [windows]
        if: ${{matrix.os.platform_id == 'win_amd64'}}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-gcc-libs

      - name: Set up external-libs [windows]
        if: ${{matrix.os.platform_id == 'win_amd64'}}
        shell: pwsh
        run: |
          Copy-Item -Path "C:/mingw64/bin/libgcc_s_seh-1.dll" -Destination ".\deepsearch_glm"
          Copy-Item -Path "C:/mingw64/bin/libstdc++-6.dll" -Destination ".\deepsearch_glm"
          Copy-Item -Path "C:/mingw64/bin/libwinpthread-1.dll" -Destination ".\deepsearch_glm"

      - name: Build wheels [windows]
        if: ${{matrix.os.platform_id == 'win_amd64'}}
        env:
          CIBW_PLATFORM: windows
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS: AMD64
          CIBW_PROJECT_REQUIRES_PYTHON: "~=${{ matrix.python-version }}.0"
          PKG_CONFIG_PATH: "C:/msys64/usr/lib/pkgconfig"
          PKG_CONFIG_EXECUTABLE: "C:/mingw64/bin/pkg-config.exe"
          CMAKE_PREFIX_PATH: "C:/msys64/mingw64;C:/mingw64"
          CMAKE_LIBRARY_PATH: "C:/msys64/mingw64/lib;C:/mingw64/lib"
          CMAKE_INCLUDE_PATH: "C:/msys64/mingw64/include;C:/mingw64/include"
          CMAKE_GENERATOR: "MSYS Makefiles"
          BUILD_THREADS: 1
        shell: pwsh
        run: |
          Remove-Item -Recurse -Force "C:\Strawberry\"
          poetry install --no-interaction --no-root --only=build
          poetry run python -m cibuildwheel --output-dir .\wheelhouse
          Get-ChildItem -Path .\wheelhouse -Filter *.whl | Format-List
          Get-ChildItem -Path .\wheelhouse -Filter *.whl | ForEach-Object {
              $file = $_.FullName
              Write-Output "Inspecting $file"
              poetry run python -m zipfile --list "$file"
          }
          if (-not (Test-Path -Path .\dist)) {
              New-Item -Path .\dist -ItemType Directory
          }
          Copy-Item -Path .\wheelhouse\*.whl -Destination .\dist\
    
      - name: Test install wheel [windows]
        if: ${{matrix.os.platform_id == 'win_amd64'}}
        shell: pwsh
        run: |
          $wheel_file = Get-ChildItem dist\*.whl | Select-Object -First 1
          Write-Host "Installing wheel: $wheel_file"
          poetry run pip install "$wheel_file"

      - name: Quick test wheel
        if: ${{ matrix.os.platform_id == 'win_amd64' || (matrix.os.platform_id == 'macosx_arm64' && matrix.os.name == 'macos-14') }}
        run: |
          poetry install --no-interaction --no-root --only=test
          poetry run python -c 'from deepsearch_glm import andromeda_glm'
          poetry run pytest ./tests/test_glm.py -v
          
      - name: Publish wheels (dry run)
        run: |
          poetry publish --skip-existing --dry-run --no-interaction -vvv

      - name: Publish wheels (on publishing) [for releases only]
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          poetry publish --skip-existing --no-interaction -vvv
